{"version":3,"sources":["logs-loading.js","App.js","hoc/initialize.js","reportWebVitals.js","index.js"],"names":["Logsloading","props","log","map","logs","index","name","text","initLoading","Wrapper","loadData","useState","setName","setText","setLog","saveStorage","jsonLog","JSON","stringify","localStorage","setItem","id","onSubmit","preventDefault","push","type","value","onChange","e","target","loaddata","setData","useEffect","fetch","a","tmpLoad","getItem","length","load","parse","Loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAaeA,EAZY,SAACC,GAExB,OACE,8BAEQA,EAAMC,IAAIC,KAAI,SAACC,EAAMC,GACnB,OAAO,gCAAmBD,EAAKE,KAAM,uBAAOF,EAAKG,OAAhCF,S,uBC+BlBG,ICpCaC,EDoCbD,GCpCaC,EDG5B,YAA0B,IAAZC,EAAW,EAAXA,SAAW,EACCC,mBAAS,sBADV,mBAChBL,EADgB,KACVM,EADU,OAECD,mBAAS,IAFV,mBAEhBJ,EAFgB,KAEVM,EAFU,OAGDF,mBAASD,GAHR,mBAGhBR,EAHgB,KAGXY,EAHW,KAYlBC,EAAc,WAClB,IAAIC,EAAUC,KAAKC,UAAUhB,GAC7BiB,aAAaC,QAAQ,MAAMJ,IAG5B,OACE,oCACE,oBAAIK,GAAI,QAAR,uBACA,sBAAMC,SAfS,SAACrB,GAClBA,EAAMsB,iBACNrB,EAAIsB,KAAK,CAAClB,KAAKA,EAAKC,KAAKA,IACzBO,EAAOZ,GACPa,KAWE,SACE,gCACE,uBAAOU,KAAK,OAAOC,MAAOpB,EAAMqB,SAAU,SAACC,GAAD,OAAOhB,EAAQgB,EAAEC,OAAOH,UAAU,uBAC5E,uBAAOD,KAAK,OAAOC,MAAOnB,EAAMoB,SAAU,SAACC,GAAD,OAAOf,EAAQe,EAAEC,OAAOH,UAAU,uBAC5E,uDAGJ,oBAAIL,GAAI,QAAR,0BACA,cAAC,EAAD,CAAanB,IAAKA,QC9Bb,WAAO,IAAD,EAEkBS,mBAAS,MAF3B,mBAEFmB,EAFE,KAEOC,EAFP,KAITC,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAK,uCAAG,8BAAAC,EAAA,sDAGY,KAFhBC,EAAUhB,aAAaiB,QAAQ,QAE1BC,OACPN,EAAQ,CAAC,CAACzB,KAAK,SAASC,KAAK,aAEvB+B,EAAOrB,KAAKsB,MAAMJ,GACxBJ,EAAQO,IAPF,2CAAH,qDAWLE,EACF,2DAGJ,OAAOV,EAAW,cAACrB,EAAD,CAASC,SAAUoB,IAAeU,ICd7CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c66e348c.chunk.js","sourcesContent":["import React from 'react';\nexport const Logsloading = (props) => {\n     \n    return (\n      <div>\n          {\n              props.log.map((logs, index) => {\n                return <div key={index}>{ logs.name }<br/>{ logs.text }</div>\n              })\n          }\n      </div> \n    )\n}\nexport default Logsloading","import { useState,React } from 'react';\nimport './App.css';\nimport Logsloading from './logs-loading';\nimport { initLoading } from './hoc/initialize';\n\nfunction App({loadData}) {\n  const [name, setName] = useState('名無し');\n  const [text, setText] = useState('');\n  const [log, setLog] = useState(loadData);\n\n  const submitForm = (props) => {\n    props.preventDefault();\n    log.push({name:name,text:text});\n    setLog(log);\n    saveStorage();\n }\n\n const saveStorage = () => {\n   var jsonLog = JSON.stringify(log);\n   localStorage.setItem('log',jsonLog);\n }\n  \n  return (\n    <section>\n      <h4 id =\"title\">React-BBS</h4>\n      <form onSubmit={submitForm}>\n        <div>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /><br/>\n          <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} /><br/>\n          <button>投稿</button>\n        </div>\n      </form>\n      <h4 id =\"title\">ログ</h4>\n      <Logsloading log={log}/>\n    </section>\n  );\n}\n\nexport default initLoading(App);","import { useEffect,useState,React } from \"react\";\n\nexport const initLoading = (Wrapper) => {\n    return () => {\n\n        const [loaddata,setData] = useState(null);\n\n        useEffect(() => {\n            fetch();\n        },[])\n\n        const fetch = async() => {\n            const tmpLoad = localStorage.getItem('log');\n            \n            if(tmpLoad.length === 0){\n                setData([{name:\"sample\",text:\"sample\"}]);\n            }else{\n                const load = JSON.parse(tmpLoad);\n                setData(load);    \n            }\n        }\n\n        const Loading = (\n            <div>ロード中</div>\n        )\n\n        return loaddata ? <Wrapper loadData={loaddata} /> : Loading;\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}